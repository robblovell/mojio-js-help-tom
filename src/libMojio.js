// Generated by CoffeeScript 1.8.0
(function() {
  var MojioClient, config, connection, logger, mojioClient, rest, scope;

  MojioClient = require('mojio-js');

  config = require('./config');

  rest = require('restler');

  scope = process.env.NODE_ENV || 'dev';

  logger = console;

  mojioClient = null;

  connection = null;

  module.exports = {
    connect: function(local_config, callback) {
      if (!local_config.username || !local_config.password) {
        return callback(new Error('Not connected'));
      } else {
        mojioClient = new MojioClient(local_config);
        return mojioClient.login(local_config.username, local_config.password, function(err, result) {
          if (err) {
            logger.error(err);
            return callback(err);
          } else {
            return callback(null, mojioClient);
          }
        });
      }
    },
    isConnected: function() {
      if (mojioClient) {
        return true;
      } else {
        return false;
      }
    },
    getUser: function(callback) {
      var err;
      if (!mojioClient) {
        err = new Error("We are not connected to Mojio.");
        return callback(err);
      }
      return mojioClient.getCurrentUser(function(err, result) {
        if (err) {
          return callback(err);
        } else {
          return callback(null, result);
        }
      });
    },
    restLogin: function(input_config, callback) {
      var request;
      request = {
        method: 'post',
        data: {
          username: input_config.username,
          password: input_config.password,
          client_id: config.app.application,
          client_secret: config.app.secret,
          grant_type: 'password'
        }
      };
      return rest.post('https://api.moj.io/OAuth2Sandbox/token', request).on('complete', function(result, response) {
        var token;
        if (response.statusCode === 200) {
          token = JSON.parse(response.rawEncoded).access_token;
          return callback(null, token);
        } else {
          logger.error('User ' + request.username + ' NOT logged in! Response:\n' + util.inspect(response, false, null));
          return callback(new Error('Login Error!'), '');
        }
      });
    },
    getEntity: function(local_config, callback) {
      var err, model;
      if (!this.isConnected()) {
        err = new Error("We are not connected to Mojio.");
        return callback(err);
      }
      model = mojioClient.model(local_config.subject);
      return mojioClient.get(model, local_config.criteria, function(err, result) {
        if (err) {
          return callback(err);
        } else {
          mojioClient.getResults(model, result);
          return callback(null, result);
        }
      });
    },
    testObserver: function(callback) {
      var App;
      App = mojioClient.model('App');
      return mojioClient.get(App, {}, function(error, result) {
        var app, event_triggered;
        event_triggered = false;
        app = new App(result[0]);
        logger.info("retrieved app");
        return mojioClient.observe(app, null, function(entity) {
          event_triggered = true;
          return mojioClient.unobserve(observer, app, null, (function(error, result) {
            return {};
          }));
        }, function(error, result) {
          var observer;
          app.Description = "Changed";
          observer = result;
          mojioClient.put(app, function(error, result) {
            event_triggered = true;
            return callback(event_triggered);
          });
          app.Description = "A Description";
          return mojioClient.put(app, function(error, result) {
            return logger.info("App changed back.");
          });
        });
      });
    }
  };

}).call(this);

//# sourceMappingURL=libMojio.js.map
